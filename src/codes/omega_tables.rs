#![doc(hidden)]
// THIS FILE HAS BEEN GENERATED BY THE SCRIPT gen_code_tables.py
// ~~~~~~~~~~~~~~~~~~~ DO NOT MODIFY ~~~~~~~~~~~~~~~~~~~~~~
// Methods for reading and writing values using precomputed tables for omega codes
use crate::traits::{BitRead, BitWrite, BE, LE};
use common_traits::*;
/// How many bits are needed to read the tables in this
pub const READ_BITS: usize = 6;
const _: () = assert!(READ_BITS >= 2, "Tables for Elias Ï‰ code must use at least 2 bits");
/// Maximum value writable using the table(s)
pub const WRITE_MAX: u64 = 255;

/// Reads from the decoding table.
///
/// Returns `(len_with_flag, value)` where:
/// - If len_with_flag & 0x80 == 0: complete code, value is decoded value, len_with_flag is code length
/// - If len_with_flag & 0x80 != 0: partial code, value is partial_n, (len_with_flag & 0x7F) is partial_len
/// - If len_with_flag = 0: no valid decoding (cannot occur with >= 2 bit tables)
///
/// The backend position is always advanced by (len_with_flag & 0x7F) bits.
/// Using the high bit flag instead of negative values allows extracting the length
/// with a bitwise AND instead of abs(), which is typically faster.
#[inline(always)]
pub fn read_table_le<B: BitRead<LE>>(backend: &mut B) -> (u8, u64) {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx = idx.cast() as usize;
        let len_with_flag = READ_LEN_LE[idx];
        let value = READ_LE[idx] as u64;
        backend.skip_bits_after_peek((len_with_flag & 0x7F) as usize);

        (len_with_flag, value)
    } else {
        // Not enough bits available - return initial state
        (0, 1)
    }
}

/// Reads from the decoding table.
///
/// Returns `(len_with_flag, value)` where:
/// - If len_with_flag & 0x80 == 0: complete code, value is decoded value, len_with_flag is code length
/// - If len_with_flag & 0x80 != 0: partial code, value is partial_n, (len_with_flag & 0x7F) is partial_len
/// - If len_with_flag = 0: no valid decoding (cannot occur with >= 2 bit tables)
///
/// The backend position is always advanced by (len_with_flag & 0x7F) bits.
/// Using the high bit flag instead of negative values allows extracting the length
/// with a bitwise AND instead of abs(), which is typically faster.
#[inline(always)]
pub fn read_table_be<B: BitRead<BE>>(backend: &mut B) -> (u8, u64) {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx = idx.cast() as usize;
        let len_with_flag = READ_LEN_BE[idx];
        let value = READ_BE[idx] as u64;
        backend.skip_bits_after_peek((len_with_flag & 0x7F) as usize);

        (len_with_flag, value)
    } else {
        // Not enough bits available - return initial state
        (0, 1)
    }
}

/// Write a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
#[inline(always)]
pub fn write_table_le<B: BitWrite<LE>>(backend: &mut B, value: u64) -> Result<Option<usize>, B::Error> {
    Ok(if let Some(bits) = WRITE_LE.get(value as usize) {
        let len = WRITE_LEN_LE[value as usize] as usize;
        backend.write_bits(*bits as u64, len)?;
        Some(len)
    } else {
        None
    })
}

/// Write a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
#[inline(always)]
pub fn write_table_be<B: BitWrite<BE>>(backend: &mut B, value: u64) -> Result<Option<usize>, B::Error> {
    Ok(if let Some(bits) = WRITE_BE.get(value as usize) {
        let len = WRITE_LEN_BE[value as usize] as usize;
        backend.write_bits(*bits as u64, len)?;
        Some(len)
    } else {
        None
    })
}
/// Precomputed table for reading omega codes
/// For complete codes: stores the decoded value
/// For partial codes: stores the partial n state
pub const READ_BE: &[u8] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 5, 5, 6, 6, 7, 2, 2, 2, 2, 2, 2, 2, 2, 8, 9, 10, 11, 12, 13, 14, 15, ];
/// Precomputed lengths table for reading omega codes
/// High bit clear (< 0x80): complete code length
/// High bit set (>= 0x80): (value & 0x7F) is partial_len (bits consumed by complete blocks)
/// Zero: no valid decoding (cannot occur with >= 2 bit tables)
pub const READ_LEN_BE: &[u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 6, 133, 6, 133, 6, 133, 6, 133, 3, 3, 3, 3, 3, 3, 3, 3, 134, 134, 134, 134, 134, 134, 134, 134, ];
/// Precomputed table for reading omega codes
/// For complete codes: stores the decoded value
/// For partial codes: stores the partial n state
pub const READ_LE: &[u8] = &[0, 1, 0, 2, 0, 3, 0, 8, 0, 1, 0, 2, 0, 4, 0, 9, 0, 1, 0, 2, 0, 5, 0, 10, 0, 1, 0, 2, 0, 6, 0, 11, 0, 1, 0, 2, 0, 4, 0, 12, 0, 1, 0, 2, 0, 5, 0, 13, 0, 1, 0, 2, 0, 6, 0, 14, 0, 1, 0, 2, 0, 7, 0, 15, ];
/// Precomputed lengths table for reading omega codes
/// High bit clear (< 0x80): complete code length
/// High bit set (>= 0x80): (value & 0x7F) is partial_len (bits consumed by complete blocks)
/// Zero: no valid decoding (cannot occur with >= 2 bit tables)
pub const READ_LEN_LE: &[u8] = &[1, 3, 1, 3, 1, 6, 1, 134, 1, 3, 1, 3, 1, 6, 1, 134, 1, 3, 1, 3, 1, 6, 1, 134, 1, 3, 1, 3, 1, 6, 1, 134, 1, 3, 1, 3, 1, 133, 1, 134, 1, 3, 1, 3, 1, 133, 1, 134, 1, 3, 1, 3, 1, 133, 1, 134, 1, 3, 1, 3, 1, 133, 1, 134, ];
///Table used to speed up the writing of omega codes
pub const WRITE_BE: &[u16] = &[0,4,6,40,42,44,46,112,114,116,118,120,122,124,126,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,2752,2754,2756,2758,2760,2762,2764,2766,2768,2770,2772,2774,2776,2778,2780,2782,2784,2786,2788,2790,2792,2794,2796,2798,2800,2802,2804,2806,2808,2810,2812,2814,5760,5762,5764,5766,5768,5770,5772,5774,5776,5778,5780,5782,5784,5786,5788,5790,5792,5794,5796,5798,5800,5802,5804,5806,5808,5810,5812,5814,5816,5818,5820,5822,5824,5826,5828,5830,5832,5834,5836,5838,5840,5842,5844,5846,5848,5850,5852,5854,5856,5858,5860,5862,5864,5866,5868,5870,5872,5874,5876,5878,5880,5882,5884,5886,12032,12034,12036,12038,12040,12042,12044,12046,12048,12050,12052,12054,12056,12058,12060,12062,12064,12066,12068,12070,12072,12074,12076,12078,12080,12082,12084,12086,12088,12090,12092,12094,12096,12098,12100,12102,12104,12106,12108,12110,12112,12114,12116,12118,12120,12122,12124,12126,12128,12130,12132,12134,12136,12138,12140,12142,12144,12146,12148,12150,12152,12154,12156,12158,12160,12162,12164,12166,12168,12170,12172,12174,12176,12178,12180,12182,12184,12186,12188,12190,12192,12194,12196,12198,12200,12202,12204,12206,12208,12210,12212,12214,12216,12218,12220,12222,12224,12226,12228,12230,12232,12234,12236,12238,12240,12242,12244,12246,12248,12250,12252,12254,12256,12258,12260,12262,12264,12266,12268,12270,12272,12274,12276,12278,12280,12282,12284,12286,57856,];
///Table used to speed up the writing of omega codes
pub const WRITE_LEN_BE: &[u16] = &[1, 3, 3, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, ];
///Table used to speed up the writing of omega codes
pub const WRITE_LE: &[u16] = &[0,1,3,5,13,21,29,7,15,23,31,39,47,55,63,37,101,165,229,293,357,421,485,549,613,677,741,805,869,933,997,45,109,173,237,301,365,429,493,557,621,685,749,813,877,941,1005,1069,1133,1197,1261,1325,1389,1453,1517,1581,1645,1709,1773,1837,1901,1965,2029,53,117,181,245,309,373,437,501,565,629,693,757,821,885,949,1013,1077,1141,1205,1269,1333,1397,1461,1525,1589,1653,1717,1781,1845,1909,1973,2037,2101,2165,2229,2293,2357,2421,2485,2549,2613,2677,2741,2805,2869,2933,2997,3061,3125,3189,3253,3317,3381,3445,3509,3573,3637,3701,3765,3829,3893,3957,4021,4085,61,125,189,253,317,381,445,509,573,637,701,765,829,893,957,1021,1085,1149,1213,1277,1341,1405,1469,1533,1597,1661,1725,1789,1853,1917,1981,2045,2109,2173,2237,2301,2365,2429,2493,2557,2621,2685,2749,2813,2877,2941,3005,3069,3133,3197,3261,3325,3389,3453,3517,3581,3645,3709,3773,3837,3901,3965,4029,4093,4157,4221,4285,4349,4413,4477,4541,4605,4669,4733,4797,4861,4925,4989,5053,5117,5181,5245,5309,5373,5437,5501,5565,5629,5693,5757,5821,5885,5949,6013,6077,6141,6205,6269,6333,6397,6461,6525,6589,6653,6717,6781,6845,6909,6973,7037,7101,7165,7229,7293,7357,7421,7485,7549,7613,7677,7741,7805,7869,7933,7997,8061,8125,8189,71,];
///Table used to speed up the writing of omega codes
pub const WRITE_LEN_LE: &[u16] = &[1, 3, 3, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, ];
///Table used to speed up the skipping of omega codes
pub const LEN: &[u8] = &[1, 3, 3, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, ];
