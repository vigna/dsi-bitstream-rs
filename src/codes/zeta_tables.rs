#![doc(hidden)]
// THIS FILE HAS BEEN GENERATED BY THE SCRIPT gen_code_tables.py
// ~~~~~~~~~~~~~~~~~~~ DO NOT MODIFY ~~~~~~~~~~~~~~~~~~~~~~
// Methods for reading and writing values using precomputed tables for zeta codes
use crate::traits::{BitRead, BitWrite, BE, LE};
use common_traits::*;
/// How many bits are needed to read the tables in this
pub const READ_BITS: usize = 1;
/// Maximum value writable using the table(s)
pub const WRITE_MAX: u64 = 255;

#[inline(always)]
/// Read a value using a decoding table.
///
/// If the result is `Some` the decoding was successful, and
/// the decoded value and the length of the code are returned.
pub fn read_table_le<B: BitRead<LE>>(backend: &mut B) -> Option<(u64, usize)> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.cast();
        let (value, len) = READ_LE[idx as usize];
        if len != MISSING_VALUE_LEN_LE {
            backend.skip_bits_after_peek(len as usize);
            return Some((value as u64, len as usize));
        }
    }
    None
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)]  // rationale: "*bits as u64" is flaky redundant
/// Write a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
pub fn write_table_le<B: BitWrite<LE>>(backend: &mut B, value: u64) -> Result<Option<usize>, B::Error> {
    Ok(if let Some((bits, len)) = WRITE_LE.get(value as usize) {
        backend.write_bits(*bits as u64, *len as usize)?;
        Some(*len as usize)        
    } else {
        None
    })
}

#[inline(always)]
/// Read a value using a decoding table.
///
/// If the result is `Some` the decoding was successful, and
/// the decoded value and the length of the code are returned.
pub fn read_table_be<B: BitRead<BE>>(backend: &mut B) -> Option<(u64, usize)> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.cast();
        let (value, len) = READ_BE[idx as usize];
        if len != MISSING_VALUE_LEN_BE {
            backend.skip_bits_after_peek(len as usize);
            return Some((value as u64, len as usize));
        }
    }
    None
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)]  // rationale: "*bits as u64" is flaky redundant
/// Write a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
pub fn write_table_be<B: BitWrite<BE>>(backend: &mut B, value: u64) -> Result<Option<usize>, B::Error> {
    Ok(if let Some((bits, len)) = WRITE_BE.get(value as usize) {
        backend.write_bits(*bits as u64, *len as usize)?;
        Some(*len as usize)        
    } else {
        None
    })
}
/// The len we assign to a code that cannot be decoded through the table
pub const MISSING_VALUE_LEN_BE: u8 = 1;
/// Precomputed table for reading zeta codes
pub const READ_BE: &[(u8, u8)] = &[(0, 1), (0, 1), ];
/// The len we assign to a code that cannot be decoded through the table
pub const MISSING_VALUE_LEN_LE: u8 = 1;
/// Precomputed table for reading zeta codes
pub const READ_LE: &[(u8, u8)] = &[(0, 1), (0, 1), ];
/// Precomputed lengths table for writing zeta codes
pub const WRITE_BE: &[(u16, u8)] = &[(4, 3),(10, 4),(11, 4),(12, 4),(13, 4),(14, 4),(15, 4),(32, 7),(33, 7),(34, 7),(35, 7),(36, 7),(37, 7),(38, 7),(39, 7),(80, 8),(81, 8),(82, 8),(83, 8),(84, 8),(85, 8),(86, 8),(87, 8),(88, 8),(89, 8),(90, 8),(91, 8),(92, 8),(93, 8),(94, 8),(95, 8),(96, 8),(97, 8),(98, 8),(99, 8),(100, 8),(101, 8),(102, 8),(103, 8),(104, 8),(105, 8),(106, 8),(107, 8),(108, 8),(109, 8),(110, 8),(111, 8),(112, 8),(113, 8),(114, 8),(115, 8),(116, 8),(117, 8),(118, 8),(119, 8),(120, 8),(121, 8),(122, 8),(123, 8),(124, 8),(125, 8),(126, 8),(127, 8),(256, 11),(257, 11),(258, 11),(259, 11),(260, 11),(261, 11),(262, 11),(263, 11),(264, 11),(265, 11),(266, 11),(267, 11),(268, 11),(269, 11),(270, 11),(271, 11),(272, 11),(273, 11),(274, 11),(275, 11),(276, 11),(277, 11),(278, 11),(279, 11),(280, 11),(281, 11),(282, 11),(283, 11),(284, 11),(285, 11),(286, 11),(287, 11),(288, 11),(289, 11),(290, 11),(291, 11),(292, 11),(293, 11),(294, 11),(295, 11),(296, 11),(297, 11),(298, 11),(299, 11),(300, 11),(301, 11),(302, 11),(303, 11),(304, 11),(305, 11),(306, 11),(307, 11),(308, 11),(309, 11),(310, 11),(311, 11),(312, 11),(313, 11),(314, 11),(315, 11),(316, 11),(317, 11),(318, 11),(319, 11),(640, 12),(641, 12),(642, 12),(643, 12),(644, 12),(645, 12),(646, 12),(647, 12),(648, 12),(649, 12),(650, 12),(651, 12),(652, 12),(653, 12),(654, 12),(655, 12),(656, 12),(657, 12),(658, 12),(659, 12),(660, 12),(661, 12),(662, 12),(663, 12),(664, 12),(665, 12),(666, 12),(667, 12),(668, 12),(669, 12),(670, 12),(671, 12),(672, 12),(673, 12),(674, 12),(675, 12),(676, 12),(677, 12),(678, 12),(679, 12),(680, 12),(681, 12),(682, 12),(683, 12),(684, 12),(685, 12),(686, 12),(687, 12),(688, 12),(689, 12),(690, 12),(691, 12),(692, 12),(693, 12),(694, 12),(695, 12),(696, 12),(697, 12),(698, 12),(699, 12),(700, 12),(701, 12),(702, 12),(703, 12),(704, 12),(705, 12),(706, 12),(707, 12),(708, 12),(709, 12),(710, 12),(711, 12),(712, 12),(713, 12),(714, 12),(715, 12),(716, 12),(717, 12),(718, 12),(719, 12),(720, 12),(721, 12),(722, 12),(723, 12),(724, 12),(725, 12),(726, 12),(727, 12),(728, 12),(729, 12),(730, 12),(731, 12),(732, 12),(733, 12),(734, 12),(735, 12),(736, 12),(737, 12),(738, 12),(739, 12),(740, 12),(741, 12),(742, 12),(743, 12),(744, 12),(745, 12),(746, 12),(747, 12),(748, 12),(749, 12),(750, 12),(751, 12),(752, 12),(753, 12),(754, 12),(755, 12),(756, 12),(757, 12),(758, 12),(759, 12),(760, 12),(761, 12),(762, 12),(763, 12),(764, 12),(765, 12),(766, 12),(767, 12),(768, 12),];
/// Precomputed lengths table for writing zeta codes
pub const WRITE_LE: &[(u16, u8)] = &[(1, 3),(3, 4),(11, 4),(5, 4),(13, 4),(7, 4),(15, 4),(2, 7),(6, 7),(10, 7),(14, 7),(18, 7),(22, 7),(26, 7),(30, 7),(34, 8),(162, 8),(38, 8),(166, 8),(42, 8),(170, 8),(46, 8),(174, 8),(50, 8),(178, 8),(54, 8),(182, 8),(58, 8),(186, 8),(62, 8),(190, 8),(66, 8),(194, 8),(70, 8),(198, 8),(74, 8),(202, 8),(78, 8),(206, 8),(82, 8),(210, 8),(86, 8),(214, 8),(90, 8),(218, 8),(94, 8),(222, 8),(98, 8),(226, 8),(102, 8),(230, 8),(106, 8),(234, 8),(110, 8),(238, 8),(114, 8),(242, 8),(118, 8),(246, 8),(122, 8),(250, 8),(126, 8),(254, 8),(4, 11),(12, 11),(20, 11),(28, 11),(36, 11),(44, 11),(52, 11),(60, 11),(68, 11),(76, 11),(84, 11),(92, 11),(100, 11),(108, 11),(116, 11),(124, 11),(132, 11),(140, 11),(148, 11),(156, 11),(164, 11),(172, 11),(180, 11),(188, 11),(196, 11),(204, 11),(212, 11),(220, 11),(228, 11),(236, 11),(244, 11),(252, 11),(260, 11),(268, 11),(276, 11),(284, 11),(292, 11),(300, 11),(308, 11),(316, 11),(324, 11),(332, 11),(340, 11),(348, 11),(356, 11),(364, 11),(372, 11),(380, 11),(388, 11),(396, 11),(404, 11),(412, 11),(420, 11),(428, 11),(436, 11),(444, 11),(452, 11),(460, 11),(468, 11),(476, 11),(484, 11),(492, 11),(500, 11),(508, 11),(516, 12),(2564, 12),(524, 12),(2572, 12),(532, 12),(2580, 12),(540, 12),(2588, 12),(548, 12),(2596, 12),(556, 12),(2604, 12),(564, 12),(2612, 12),(572, 12),(2620, 12),(580, 12),(2628, 12),(588, 12),(2636, 12),(596, 12),(2644, 12),(604, 12),(2652, 12),(612, 12),(2660, 12),(620, 12),(2668, 12),(628, 12),(2676, 12),(636, 12),(2684, 12),(644, 12),(2692, 12),(652, 12),(2700, 12),(660, 12),(2708, 12),(668, 12),(2716, 12),(676, 12),(2724, 12),(684, 12),(2732, 12),(692, 12),(2740, 12),(700, 12),(2748, 12),(708, 12),(2756, 12),(716, 12),(2764, 12),(724, 12),(2772, 12),(732, 12),(2780, 12),(740, 12),(2788, 12),(748, 12),(2796, 12),(756, 12),(2804, 12),(764, 12),(2812, 12),(772, 12),(2820, 12),(780, 12),(2828, 12),(788, 12),(2836, 12),(796, 12),(2844, 12),(804, 12),(2852, 12),(812, 12),(2860, 12),(820, 12),(2868, 12),(828, 12),(2876, 12),(836, 12),(2884, 12),(844, 12),(2892, 12),(852, 12),(2900, 12),(860, 12),(2908, 12),(868, 12),(2916, 12),(876, 12),(2924, 12),(884, 12),(2932, 12),(892, 12),(2940, 12),(900, 12),(2948, 12),(908, 12),(2956, 12),(916, 12),(2964, 12),(924, 12),(2972, 12),(932, 12),(2980, 12),(940, 12),(2988, 12),(948, 12),(2996, 12),(956, 12),(3004, 12),(964, 12),(3012, 12),(972, 12),(3020, 12),(980, 12),(3028, 12),(988, 12),(3036, 12),(996, 12),(3044, 12),(1004, 12),(3052, 12),(1012, 12),(3060, 12),(1020, 12),(3068, 12),(1028, 12),];
///Table used to speed up the skipping of zeta codes
pub const LEN: &[u8] = &[3, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, ];
/// The K of the zeta codes for these tables
pub const K: usize = 3;