#![doc(hidden)]
// THIS FILE HAS BEEN GENERATED BY THE SCRIPT gen_code_tables.py
// ~~~~~~~~~~~~~~~~~~~ DO NOT MODIFY ~~~~~~~~~~~~~~~~~~~~~~
// Methods for reading and writing values using precomputed tables for gamma codes
use crate::traits::{BitRead, BitWrite, BE, LE};
use common_traits::*;
/// How many bits are needed to read the tables in this
pub const READ_BITS: usize = 1;
/// Maximum value writable using the table(s)
pub const WRITE_MAX: u64 = 255;

#[inline(always)]
/// Read a value using a decoding table.
///
/// If the result is `Some` the decoding was successful, and
/// the decoded value and the length of the code are returned.
pub fn read_table_le<B: BitRead<LE>>(backend: &mut B) -> Option<(u64, usize)> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.cast();
        let (value, len) = READ_LE[idx as usize];
        if len != MISSING_VALUE_LEN_LE {
            backend.skip_bits_after_peek(len as usize);
            return Some((value as u64, len as usize));
        }
    }
    None
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)]  // rationale: "*bits as u64" is flaky redundant
/// Write a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
pub fn write_table_le<B: BitWrite<LE>>(backend: &mut B, value: u64) -> Result<Option<usize>, B::Error> {
    Ok(if let Some((bits, len)) = WRITE_LE.get(value as usize) {
        backend.write_bits(*bits as u64, *len as usize)?;
        Some(*len as usize)        
    } else {
        None
    })
}

#[inline(always)]
/// Read a value using a decoding table.
///
/// If the result is `Some` the decoding was successful, and
/// the decoded value and the length of the code are returned.
pub fn read_table_be<B: BitRead<BE>>(backend: &mut B) -> Option<(u64, usize)> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.cast();
        let (value, len) = READ_BE[idx as usize];
        if len != MISSING_VALUE_LEN_BE {
            backend.skip_bits_after_peek(len as usize);
            return Some((value as u64, len as usize));
        }
    }
    None
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)]  // rationale: "*bits as u64" is flaky redundant
/// Write a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
pub fn write_table_be<B: BitWrite<BE>>(backend: &mut B, value: u64) -> Result<Option<usize>, B::Error> {
    Ok(if let Some((bits, len)) = WRITE_BE.get(value as usize) {
        backend.write_bits(*bits as u64, *len as usize)?;
        Some(*len as usize)        
    } else {
        None
    })
}
/// The len we assign to a code that cannot be decoded through the table
pub const MISSING_VALUE_LEN_BE: u8 = 2;
/// Precomputed table for reading gamma codes
pub const READ_BE: &[(u8, u8)] = &[(0, 2), (0, 1), ];
/// The len we assign to a code that cannot be decoded through the table
pub const MISSING_VALUE_LEN_LE: u8 = 2;
/// Precomputed table for reading gamma codes
pub const READ_LE: &[(u8, u8)] = &[(0, 2), (0, 1), ];
/// Precomputed lengths table for writing gamma codes
pub const WRITE_BE: &[(u32, u8)] = &[(1, 1),(2, 3),(3, 3),(4, 5),(5, 5),(6, 5),(7, 5),(8, 7),(9, 7),(10, 7),(11, 7),(12, 7),(13, 7),(14, 7),(15, 7),(16, 9),(17, 9),(18, 9),(19, 9),(20, 9),(21, 9),(22, 9),(23, 9),(24, 9),(25, 9),(26, 9),(27, 9),(28, 9),(29, 9),(30, 9),(31, 9),(32, 11),(33, 11),(34, 11),(35, 11),(36, 11),(37, 11),(38, 11),(39, 11),(40, 11),(41, 11),(42, 11),(43, 11),(44, 11),(45, 11),(46, 11),(47, 11),(48, 11),(49, 11),(50, 11),(51, 11),(52, 11),(53, 11),(54, 11),(55, 11),(56, 11),(57, 11),(58, 11),(59, 11),(60, 11),(61, 11),(62, 11),(63, 11),(64, 13),(65, 13),(66, 13),(67, 13),(68, 13),(69, 13),(70, 13),(71, 13),(72, 13),(73, 13),(74, 13),(75, 13),(76, 13),(77, 13),(78, 13),(79, 13),(80, 13),(81, 13),(82, 13),(83, 13),(84, 13),(85, 13),(86, 13),(87, 13),(88, 13),(89, 13),(90, 13),(91, 13),(92, 13),(93, 13),(94, 13),(95, 13),(96, 13),(97, 13),(98, 13),(99, 13),(100, 13),(101, 13),(102, 13),(103, 13),(104, 13),(105, 13),(106, 13),(107, 13),(108, 13),(109, 13),(110, 13),(111, 13),(112, 13),(113, 13),(114, 13),(115, 13),(116, 13),(117, 13),(118, 13),(119, 13),(120, 13),(121, 13),(122, 13),(123, 13),(124, 13),(125, 13),(126, 13),(127, 13),(128, 15),(129, 15),(130, 15),(131, 15),(132, 15),(133, 15),(134, 15),(135, 15),(136, 15),(137, 15),(138, 15),(139, 15),(140, 15),(141, 15),(142, 15),(143, 15),(144, 15),(145, 15),(146, 15),(147, 15),(148, 15),(149, 15),(150, 15),(151, 15),(152, 15),(153, 15),(154, 15),(155, 15),(156, 15),(157, 15),(158, 15),(159, 15),(160, 15),(161, 15),(162, 15),(163, 15),(164, 15),(165, 15),(166, 15),(167, 15),(168, 15),(169, 15),(170, 15),(171, 15),(172, 15),(173, 15),(174, 15),(175, 15),(176, 15),(177, 15),(178, 15),(179, 15),(180, 15),(181, 15),(182, 15),(183, 15),(184, 15),(185, 15),(186, 15),(187, 15),(188, 15),(189, 15),(190, 15),(191, 15),(192, 15),(193, 15),(194, 15),(195, 15),(196, 15),(197, 15),(198, 15),(199, 15),(200, 15),(201, 15),(202, 15),(203, 15),(204, 15),(205, 15),(206, 15),(207, 15),(208, 15),(209, 15),(210, 15),(211, 15),(212, 15),(213, 15),(214, 15),(215, 15),(216, 15),(217, 15),(218, 15),(219, 15),(220, 15),(221, 15),(222, 15),(223, 15),(224, 15),(225, 15),(226, 15),(227, 15),(228, 15),(229, 15),(230, 15),(231, 15),(232, 15),(233, 15),(234, 15),(235, 15),(236, 15),(237, 15),(238, 15),(239, 15),(240, 15),(241, 15),(242, 15),(243, 15),(244, 15),(245, 15),(246, 15),(247, 15),(248, 15),(249, 15),(250, 15),(251, 15),(252, 15),(253, 15),(254, 15),(255, 15),(256, 17),];
/// Precomputed lengths table for writing gamma codes
pub const WRITE_LE: &[(u32, u8)] = &[(1, 1),(2, 3),(6, 3),(4, 5),(12, 5),(20, 5),(28, 5),(8, 7),(24, 7),(40, 7),(56, 7),(72, 7),(88, 7),(104, 7),(120, 7),(16, 9),(48, 9),(80, 9),(112, 9),(144, 9),(176, 9),(208, 9),(240, 9),(272, 9),(304, 9),(336, 9),(368, 9),(400, 9),(432, 9),(464, 9),(496, 9),(32, 11),(96, 11),(160, 11),(224, 11),(288, 11),(352, 11),(416, 11),(480, 11),(544, 11),(608, 11),(672, 11),(736, 11),(800, 11),(864, 11),(928, 11),(992, 11),(1056, 11),(1120, 11),(1184, 11),(1248, 11),(1312, 11),(1376, 11),(1440, 11),(1504, 11),(1568, 11),(1632, 11),(1696, 11),(1760, 11),(1824, 11),(1888, 11),(1952, 11),(2016, 11),(64, 13),(192, 13),(320, 13),(448, 13),(576, 13),(704, 13),(832, 13),(960, 13),(1088, 13),(1216, 13),(1344, 13),(1472, 13),(1600, 13),(1728, 13),(1856, 13),(1984, 13),(2112, 13),(2240, 13),(2368, 13),(2496, 13),(2624, 13),(2752, 13),(2880, 13),(3008, 13),(3136, 13),(3264, 13),(3392, 13),(3520, 13),(3648, 13),(3776, 13),(3904, 13),(4032, 13),(4160, 13),(4288, 13),(4416, 13),(4544, 13),(4672, 13),(4800, 13),(4928, 13),(5056, 13),(5184, 13),(5312, 13),(5440, 13),(5568, 13),(5696, 13),(5824, 13),(5952, 13),(6080, 13),(6208, 13),(6336, 13),(6464, 13),(6592, 13),(6720, 13),(6848, 13),(6976, 13),(7104, 13),(7232, 13),(7360, 13),(7488, 13),(7616, 13),(7744, 13),(7872, 13),(8000, 13),(8128, 13),(128, 15),(384, 15),(640, 15),(896, 15),(1152, 15),(1408, 15),(1664, 15),(1920, 15),(2176, 15),(2432, 15),(2688, 15),(2944, 15),(3200, 15),(3456, 15),(3712, 15),(3968, 15),(4224, 15),(4480, 15),(4736, 15),(4992, 15),(5248, 15),(5504, 15),(5760, 15),(6016, 15),(6272, 15),(6528, 15),(6784, 15),(7040, 15),(7296, 15),(7552, 15),(7808, 15),(8064, 15),(8320, 15),(8576, 15),(8832, 15),(9088, 15),(9344, 15),(9600, 15),(9856, 15),(10112, 15),(10368, 15),(10624, 15),(10880, 15),(11136, 15),(11392, 15),(11648, 15),(11904, 15),(12160, 15),(12416, 15),(12672, 15),(12928, 15),(13184, 15),(13440, 15),(13696, 15),(13952, 15),(14208, 15),(14464, 15),(14720, 15),(14976, 15),(15232, 15),(15488, 15),(15744, 15),(16000, 15),(16256, 15),(16512, 15),(16768, 15),(17024, 15),(17280, 15),(17536, 15),(17792, 15),(18048, 15),(18304, 15),(18560, 15),(18816, 15),(19072, 15),(19328, 15),(19584, 15),(19840, 15),(20096, 15),(20352, 15),(20608, 15),(20864, 15),(21120, 15),(21376, 15),(21632, 15),(21888, 15),(22144, 15),(22400, 15),(22656, 15),(22912, 15),(23168, 15),(23424, 15),(23680, 15),(23936, 15),(24192, 15),(24448, 15),(24704, 15),(24960, 15),(25216, 15),(25472, 15),(25728, 15),(25984, 15),(26240, 15),(26496, 15),(26752, 15),(27008, 15),(27264, 15),(27520, 15),(27776, 15),(28032, 15),(28288, 15),(28544, 15),(28800, 15),(29056, 15),(29312, 15),(29568, 15),(29824, 15),(30080, 15),(30336, 15),(30592, 15),(30848, 15),(31104, 15),(31360, 15),(31616, 15),(31872, 15),(32128, 15),(32384, 15),(32640, 15),(256, 17),];
///Table used to speed up the skipping of gamma codes
pub const LEN: &[u8] = &[1, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, ];
