#![doc(hidden)]
// THIS FILE HAS BEEN GENERATED BY A SCRIPT
// ~~~~~~~~~~~~~~~~~~~ DO NOT MODIFY ~~~~~~~~~~~~~~~~~~~~~~
// Methods for reading and writing values using precomputed tables for gamma codes
use crate::traits::{BitRead, BitWrite, BE, LE};
use common_traits::CastableInto;
pub const TABLES_TYPE: &str = "packed_le";
/// How many bits are needed to read the tables in this
pub const READ_BITS: usize = 9;
/// Maximum value writable using the table(s)
pub const WRITE_MAX: u64 = 63;
/// The len we assign to a code that cannot be decoded through the read table
pub const MISSING_VALUE_LEN_BE: u8 = 10;

#[inline(always)]
/// Read a value using a decoding table.
///
/// If the result is `Some` the decoding was successful, and
/// the decoded value and the length of the code are returned.
pub fn read_table_be<B: BitRead<BE>>(backend: &mut B) -> Option<(u64, usize)> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.cast();
        let base = (idx as usize).checked_mul(1 + 1)?;
        let len = u8::from_le_bytes(READ_BE[base + 1..base + 1 + 1].try_into().unwrap());
        if len != MISSING_VALUE_LEN_BE {
            let value = u8::from_le_bytes(READ_BE[base..base + 1].try_into().unwrap());
            backend.skip_bits_after_table_lookup(len as usize);
            return Some((value as u64, len as usize));
        }
    }
    None
}

#[inline(always)]
/// Skip a value using a decoding table.
///
/// If the result is `Some` the lookup was successful, and
/// the length of the code is returned.
pub fn skip_table_be<B: BitRead<BE>>(backend: &mut B) -> Option<usize> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.cast();
        let base = (idx as usize).checked_mul(1 + 1)?;
        let len = u8::from_le_bytes(READ_BE[base + 1..base + 1 + 1].try_into().unwrap());
        if len != MISSING_VALUE_LEN_BE {
            backend.skip_bits_after_table_lookup(len as usize);
            return Some(len as usize);
        }
    }
    None
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)] // rationale: "*bits as u64" is flaky redundant
/// Write a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
pub fn write_table_be<B: BitWrite<BE>>(
    backend: &mut B,
    value: u64,
) -> Result<Option<usize>, B::Error> {
    if value >= u8::MAX as u64 / (1 + 1) {
        return Ok(None);
    }
    let base = (value as usize) * (1 + 1);
    if base >= WRITE_BE.len() {
        return Ok(None);
    }
    let bits = u8::from_le_bytes(WRITE_BE[base..base + 1].try_into().unwrap());
    let len = u8::from_le_bytes(WRITE_BE[base + 1..base + 1 + 1].try_into().unwrap());
    backend.write_bits(bits as u64, len as usize)?;
    Ok(Some(len as usize))
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)] // rationale: "*bits as u64" is flaky redundant
/// Get the length of a value using an encoding table.
///
/// If the result is `Some` the len was in the table.
pub fn len_table_be(value: u64) -> Option<usize> {
    let base = (value as usize).checked_mul(1 + 1)?;
    if base >= WRITE_BE.len() {
        return None;
    }
    let len = u8::from_le_bytes(WRITE_BE[base + 1..base + 1 + 1].try_into().unwrap());
    Some(len as usize)
}
/// Precomputed read table with packed u8 and u8
pub const READ_BE: [u8; 1024] = [
    0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0,
    10, 0, 10, 0, 10, 15, 9, 16, 9, 17, 9, 18, 9, 19, 9, 20, 9, 21, 9, 22, 9, 23, 9, 24, 9, 25, 9,
    26, 9, 27, 9, 28, 9, 29, 9, 30, 9, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 9, 7, 9, 7,
    9, 7, 9, 7, 10, 7, 10, 7, 10, 7, 10, 7, 11, 7, 11, 7, 11, 7, 11, 7, 12, 7, 12, 7, 12, 7, 12, 7,
    13, 7, 13, 7, 13, 7, 13, 7, 14, 7, 14, 7, 14, 7, 14, 7, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
    5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
    5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
    5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
    3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
    3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
    3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
    3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
    3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
    3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
    3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
    3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
];
/// Precomputed write table with packed u8 and u8
pub const WRITE_BE: [u8; 128] = [
    1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 5, 7, 5, 8, 7, 9, 7, 10, 7, 11, 7, 12, 7, 13, 7, 14, 7, 15, 7,
    16, 9, 17, 9, 18, 9, 19, 9, 20, 9, 21, 9, 22, 9, 23, 9, 24, 9, 25, 9, 26, 9, 27, 9, 28, 9, 29,
    9, 30, 9, 31, 9, 32, 11, 33, 11, 34, 11, 35, 11, 36, 11, 37, 11, 38, 11, 39, 11, 40, 11, 41,
    11, 42, 11, 43, 11, 44, 11, 45, 11, 46, 11, 47, 11, 48, 11, 49, 11, 50, 11, 51, 11, 52, 11, 53,
    11, 54, 11, 55, 11, 56, 11, 57, 11, 58, 11, 59, 11, 60, 11, 61, 11, 62, 11, 63, 11, 64, 13,
];
/// The len we assign to a code that cannot be decoded through the read table
pub const MISSING_VALUE_LEN_LE: u8 = 10;

#[inline(always)]
/// Read a value using a decoding table.
///
/// If the result is `Some` the decoding was successful, and
/// the decoded value and the length of the code are returned.
pub fn read_table_le<B: BitRead<LE>>(backend: &mut B) -> Option<(u64, usize)> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.cast();
        let base = (idx as usize).checked_mul(1 + 1)?;
        let len = u8::from_le_bytes(READ_LE[base + 1..base + 1 + 1].try_into().unwrap());
        if len != MISSING_VALUE_LEN_LE {
            let value = u8::from_le_bytes(READ_LE[base..base + 1].try_into().unwrap());
            backend.skip_bits_after_table_lookup(len as usize);
            return Some((value as u64, len as usize));
        }
    }
    None
}

#[inline(always)]
/// Skip a value using a decoding table.
///
/// If the result is `Some` the lookup was successful, and
/// the length of the code is returned.
pub fn skip_table_le<B: BitRead<LE>>(backend: &mut B) -> Option<usize> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.cast();
        let base = (idx as usize).checked_mul(1 + 1)?;
        let len = u8::from_le_bytes(READ_LE[base + 1..base + 1 + 1].try_into().unwrap());
        if len != MISSING_VALUE_LEN_LE {
            backend.skip_bits_after_table_lookup(len as usize);
            return Some(len as usize);
        }
    }
    None
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)] // rationale: "*bits as u64" is flaky redundant
/// Write a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
pub fn write_table_le<B: BitWrite<LE>>(
    backend: &mut B,
    value: u64,
) -> Result<Option<usize>, B::Error> {
    if value >= u16::MAX as u64 / (2 + 1) {
        return Ok(None);
    }
    let base = (value as usize) * (2 + 1);
    if base >= WRITE_LE.len() {
        return Ok(None);
    }
    let bits = u16::from_le_bytes(WRITE_LE[base..base + 2].try_into().unwrap());
    let len = u8::from_le_bytes(WRITE_LE[base + 2..base + 2 + 1].try_into().unwrap());
    backend.write_bits(bits as u64, len as usize)?;
    Ok(Some(len as usize))
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)] // rationale: "*bits as u64" is flaky redundant
/// Get the length of a value using an encoding table.
///
/// If the result is `Some` the len was in the table.
pub fn len_table_le(value: u64) -> Option<usize> {
    let base = (value as usize).checked_mul(2 + 1)?;
    if base >= WRITE_LE.len() {
        return None;
    }
    let len = u8::from_le_bytes(WRITE_LE[base + 2..base + 2 + 1].try_into().unwrap());
    Some(len as usize)
}
/// Precomputed read table with packed u8 and u8
pub const READ_LE: [u8; 1024] = [
    0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 7, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0,
    1, 15, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 8, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3,
    0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 9, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2,
    3, 0, 1, 16, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 10, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1,
    2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 11, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0,
    1, 2, 3, 0, 1, 17, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 12, 7, 0, 1, 1, 3, 0, 1, 6, 5,
    0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 13, 7, 0, 1, 1, 3, 0, 1, 4,
    5, 0, 1, 2, 3, 0, 1, 18, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 14, 7, 0, 1, 1, 3, 0, 1,
    6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 7, 7, 0, 1, 1, 3, 0,
    1, 4, 5, 0, 1, 2, 3, 0, 1, 19, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 8, 7, 0, 1, 1, 3,
    0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 9, 7, 0, 1, 1,
    3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 20, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 10, 7, 0, 1,
    1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 11, 7, 0,
    1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 21, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 12, 7,
    0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 13,
    7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 22, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1,
    14, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0,
    1, 7, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 23, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3,
    0, 1, 8, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2,
    3, 0, 1, 9, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 24, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1,
    2, 3, 0, 1, 10, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3, 5, 0,
    1, 2, 3, 0, 1, 11, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 25, 9, 0, 1, 1, 3, 0, 1, 5, 5,
    0, 1, 2, 3, 0, 1, 12, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0, 1, 3,
    5, 0, 1, 2, 3, 0, 1, 13, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 26, 9, 0, 1, 1, 3, 0, 1,
    5, 5, 0, 1, 2, 3, 0, 1, 14, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1, 3, 0,
    1, 3, 5, 0, 1, 2, 3, 0, 1, 7, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 27, 9, 0, 1, 1, 3,
    0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 8, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0, 1, 1,
    3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 9, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 28, 9, 0, 1,
    1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 10, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0, 10, 0,
    1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 11, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 29, 9,
    0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 12, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0, 1, 0,
    10, 0, 1, 1, 3, 0, 1, 3, 5, 0, 1, 2, 3, 0, 1, 13, 7, 0, 1, 1, 3, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1,
    30, 9, 0, 1, 1, 3, 0, 1, 5, 5, 0, 1, 2, 3, 0, 1, 14, 7, 0, 1, 1, 3, 0, 1, 6, 5, 0, 1, 2, 3, 0,
    1,
];
/// Precomputed write table with packed u16 and u8
pub const WRITE_LE: [u8; 192] = [
    1, 0, 1, 2, 0, 3, 6, 0, 3, 4, 0, 5, 12, 0, 5, 20, 0, 5, 28, 0, 5, 8, 0, 7, 24, 0, 7, 40, 0, 7,
    56, 0, 7, 72, 0, 7, 88, 0, 7, 104, 0, 7, 120, 0, 7, 16, 0, 9, 48, 0, 9, 80, 0, 9, 112, 0, 9,
    144, 0, 9, 176, 0, 9, 208, 0, 9, 240, 0, 9, 16, 1, 9, 48, 1, 9, 80, 1, 9, 112, 1, 9, 144, 1, 9,
    176, 1, 9, 208, 1, 9, 240, 1, 9, 32, 0, 11, 96, 0, 11, 160, 0, 11, 224, 0, 11, 32, 1, 11, 96,
    1, 11, 160, 1, 11, 224, 1, 11, 32, 2, 11, 96, 2, 11, 160, 2, 11, 224, 2, 11, 32, 3, 11, 96, 3,
    11, 160, 3, 11, 224, 3, 11, 32, 4, 11, 96, 4, 11, 160, 4, 11, 224, 4, 11, 32, 5, 11, 96, 5, 11,
    160, 5, 11, 224, 5, 11, 32, 6, 11, 96, 6, 11, 160, 6, 11, 224, 6, 11, 32, 7, 11, 96, 7, 11,
    160, 7, 11, 224, 7, 11, 64, 0, 13,
];
