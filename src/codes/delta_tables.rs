#![doc(hidden)]
// THIS FILE HAS BEEN GENERATED BY THE SCRIPT gen_code_tables.py
// ~~~~~~~~~~~~~~~~~~~ DO NOT MODIFY ~~~~~~~~~~~~~~~~~~~~~~
// Methods for reading and writing values using precomputed tables for delta codes
use crate::traits::{BitRead, BitWrite, BE, LE};
use common_traits::*;
/// How many bits are needed to read the tables in this
pub const READ_BITS: usize = 5;
/// Maximum value writable using the table(s)
pub const WRITE_MAX: u64 = 255;

/// Reads a value using a decoding table.
///
/// If the result is `Some` the decoding was successful, and
/// the decoded value and the length of the code are returned.
#[inline(always)]
pub fn read_table_le<B: BitRead<LE>>(backend: &mut B) -> Option<(u64, usize)> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx = idx.cast() as usize;
        let (value, len) = READ_LE[idx];
        if len != MISSING_VALUE_LEN_LE {
            backend.skip_bits_after_peek(len as usize);
            return Some((value as u64, len as usize));
        }
    }
    None
}

/// Writes a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
#[inline(always)]
#[allow(clippy::unnecessary_cast)]  // rationale: "*bits as u64" is flaky redundant
pub fn write_table_le<B: BitWrite<LE>>(backend: &mut B, value: u64) -> Result<Option<usize>, B::Error> {
    Ok(if let Some((bits, len)) = WRITE_LE.get(value as usize) {
        backend.write_bits(*bits as u64, *len as usize)?;
        Some(*len as usize)
    } else {
        None
    })
}

/// Reads a value using a decoding table.
///
/// If the result is `Some` the decoding was successful, and
/// the decoded value and the length of the code are returned.
#[inline(always)]
pub fn read_table_be<B: BitRead<BE>>(backend: &mut B) -> Option<(u64, usize)> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx = idx.cast() as usize;
        let (value, len) = READ_BE[idx];
        if len != MISSING_VALUE_LEN_BE {
            backend.skip_bits_after_peek(len as usize);
            return Some((value as u64, len as usize));
        }
    }
    None
}

/// Writes a value using an encoding table.
///
/// If the result is `Some` the encoding was successful, and
/// length of the code is returned.
#[inline(always)]
#[allow(clippy::unnecessary_cast)]  // rationale: "*bits as u64" is flaky redundant
pub fn write_table_be<B: BitWrite<BE>>(backend: &mut B, value: u64) -> Result<Option<usize>, B::Error> {
    Ok(if let Some((bits, len)) = WRITE_BE.get(value as usize) {
        backend.write_bits(*bits as u64, *len as usize)?;
        Some(*len as usize)
    } else {
        None
    })
}
/// The len we assign to a code that cannot be decoded through the table
pub const MISSING_VALUE_LEN_BE: u8 = 6;
/// Precomputed table for reading delta codes
pub const READ_BE: &[(u8, u8)] = &[(0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (1, 4), (1, 4), (2, 4), (2, 4), (3, 5), (4, 5), (5, 5), (6, 5), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), ];
/// The len we assign to a code that cannot be decoded through the table
pub const MISSING_VALUE_LEN_LE: u8 = 6;
/// Precomputed table for reading delta codes
pub const READ_LE: &[(u8, u8)] = &[(0, 6), (0, 1), (1, 4), (0, 1), (0, 6), (0, 1), (3, 5), (0, 1), (0, 6), (0, 1), (2, 4), (0, 1), (0, 6), (0, 1), (4, 5), (0, 1), (0, 6), (0, 1), (1, 4), (0, 1), (0, 6), (0, 1), (5, 5), (0, 1), (0, 6), (0, 1), (2, 4), (0, 1), (0, 6), (0, 1), (6, 5), (0, 1), ];
/// Precomputed lengths table for writing delta codes
pub const WRITE_BE: &[(u16, u8)] = &[(1, 1),(4, 4),(5, 4),(12, 5),(13, 5),(14, 5),(15, 5),(32, 8),(33, 8),(34, 8),(35, 8),(36, 8),(37, 8),(38, 8),(39, 8),(80, 9),(81, 9),(82, 9),(83, 9),(84, 9),(85, 9),(86, 9),(87, 9),(88, 9),(89, 9),(90, 9),(91, 9),(92, 9),(93, 9),(94, 9),(95, 9),(192, 10),(193, 10),(194, 10),(195, 10),(196, 10),(197, 10),(198, 10),(199, 10),(200, 10),(201, 10),(202, 10),(203, 10),(204, 10),(205, 10),(206, 10),(207, 10),(208, 10),(209, 10),(210, 10),(211, 10),(212, 10),(213, 10),(214, 10),(215, 10),(216, 10),(217, 10),(218, 10),(219, 10),(220, 10),(221, 10),(222, 10),(223, 10),(448, 11),(449, 11),(450, 11),(451, 11),(452, 11),(453, 11),(454, 11),(455, 11),(456, 11),(457, 11),(458, 11),(459, 11),(460, 11),(461, 11),(462, 11),(463, 11),(464, 11),(465, 11),(466, 11),(467, 11),(468, 11),(469, 11),(470, 11),(471, 11),(472, 11),(473, 11),(474, 11),(475, 11),(476, 11),(477, 11),(478, 11),(479, 11),(480, 11),(481, 11),(482, 11),(483, 11),(484, 11),(485, 11),(486, 11),(487, 11),(488, 11),(489, 11),(490, 11),(491, 11),(492, 11),(493, 11),(494, 11),(495, 11),(496, 11),(497, 11),(498, 11),(499, 11),(500, 11),(501, 11),(502, 11),(503, 11),(504, 11),(505, 11),(506, 11),(507, 11),(508, 11),(509, 11),(510, 11),(511, 11),(1024, 14),(1025, 14),(1026, 14),(1027, 14),(1028, 14),(1029, 14),(1030, 14),(1031, 14),(1032, 14),(1033, 14),(1034, 14),(1035, 14),(1036, 14),(1037, 14),(1038, 14),(1039, 14),(1040, 14),(1041, 14),(1042, 14),(1043, 14),(1044, 14),(1045, 14),(1046, 14),(1047, 14),(1048, 14),(1049, 14),(1050, 14),(1051, 14),(1052, 14),(1053, 14),(1054, 14),(1055, 14),(1056, 14),(1057, 14),(1058, 14),(1059, 14),(1060, 14),(1061, 14),(1062, 14),(1063, 14),(1064, 14),(1065, 14),(1066, 14),(1067, 14),(1068, 14),(1069, 14),(1070, 14),(1071, 14),(1072, 14),(1073, 14),(1074, 14),(1075, 14),(1076, 14),(1077, 14),(1078, 14),(1079, 14),(1080, 14),(1081, 14),(1082, 14),(1083, 14),(1084, 14),(1085, 14),(1086, 14),(1087, 14),(1088, 14),(1089, 14),(1090, 14),(1091, 14),(1092, 14),(1093, 14),(1094, 14),(1095, 14),(1096, 14),(1097, 14),(1098, 14),(1099, 14),(1100, 14),(1101, 14),(1102, 14),(1103, 14),(1104, 14),(1105, 14),(1106, 14),(1107, 14),(1108, 14),(1109, 14),(1110, 14),(1111, 14),(1112, 14),(1113, 14),(1114, 14),(1115, 14),(1116, 14),(1117, 14),(1118, 14),(1119, 14),(1120, 14),(1121, 14),(1122, 14),(1123, 14),(1124, 14),(1125, 14),(1126, 14),(1127, 14),(1128, 14),(1129, 14),(1130, 14),(1131, 14),(1132, 14),(1133, 14),(1134, 14),(1135, 14),(1136, 14),(1137, 14),(1138, 14),(1139, 14),(1140, 14),(1141, 14),(1142, 14),(1143, 14),(1144, 14),(1145, 14),(1146, 14),(1147, 14),(1148, 14),(1149, 14),(1150, 14),(1151, 14),(2304, 15),];
/// Precomputed lengths table for writing delta codes
pub const WRITE_LE: &[(u16, u8)] = &[(1, 1),(2, 4),(10, 4),(6, 5),(14, 5),(22, 5),(30, 5),(4, 8),(36, 8),(68, 8),(100, 8),(132, 8),(164, 8),(196, 8),(228, 8),(12, 9),(44, 9),(76, 9),(108, 9),(140, 9),(172, 9),(204, 9),(236, 9),(268, 9),(300, 9),(332, 9),(364, 9),(396, 9),(428, 9),(460, 9),(492, 9),(20, 10),(52, 10),(84, 10),(116, 10),(148, 10),(180, 10),(212, 10),(244, 10),(276, 10),(308, 10),(340, 10),(372, 10),(404, 10),(436, 10),(468, 10),(500, 10),(532, 10),(564, 10),(596, 10),(628, 10),(660, 10),(692, 10),(724, 10),(756, 10),(788, 10),(820, 10),(852, 10),(884, 10),(916, 10),(948, 10),(980, 10),(1012, 10),(28, 11),(60, 11),(92, 11),(124, 11),(156, 11),(188, 11),(220, 11),(252, 11),(284, 11),(316, 11),(348, 11),(380, 11),(412, 11),(444, 11),(476, 11),(508, 11),(540, 11),(572, 11),(604, 11),(636, 11),(668, 11),(700, 11),(732, 11),(764, 11),(796, 11),(828, 11),(860, 11),(892, 11),(924, 11),(956, 11),(988, 11),(1020, 11),(1052, 11),(1084, 11),(1116, 11),(1148, 11),(1180, 11),(1212, 11),(1244, 11),(1276, 11),(1308, 11),(1340, 11),(1372, 11),(1404, 11),(1436, 11),(1468, 11),(1500, 11),(1532, 11),(1564, 11),(1596, 11),(1628, 11),(1660, 11),(1692, 11),(1724, 11),(1756, 11),(1788, 11),(1820, 11),(1852, 11),(1884, 11),(1916, 11),(1948, 11),(1980, 11),(2012, 11),(2044, 11),(8, 14),(136, 14),(264, 14),(392, 14),(520, 14),(648, 14),(776, 14),(904, 14),(1032, 14),(1160, 14),(1288, 14),(1416, 14),(1544, 14),(1672, 14),(1800, 14),(1928, 14),(2056, 14),(2184, 14),(2312, 14),(2440, 14),(2568, 14),(2696, 14),(2824, 14),(2952, 14),(3080, 14),(3208, 14),(3336, 14),(3464, 14),(3592, 14),(3720, 14),(3848, 14),(3976, 14),(4104, 14),(4232, 14),(4360, 14),(4488, 14),(4616, 14),(4744, 14),(4872, 14),(5000, 14),(5128, 14),(5256, 14),(5384, 14),(5512, 14),(5640, 14),(5768, 14),(5896, 14),(6024, 14),(6152, 14),(6280, 14),(6408, 14),(6536, 14),(6664, 14),(6792, 14),(6920, 14),(7048, 14),(7176, 14),(7304, 14),(7432, 14),(7560, 14),(7688, 14),(7816, 14),(7944, 14),(8072, 14),(8200, 14),(8328, 14),(8456, 14),(8584, 14),(8712, 14),(8840, 14),(8968, 14),(9096, 14),(9224, 14),(9352, 14),(9480, 14),(9608, 14),(9736, 14),(9864, 14),(9992, 14),(10120, 14),(10248, 14),(10376, 14),(10504, 14),(10632, 14),(10760, 14),(10888, 14),(11016, 14),(11144, 14),(11272, 14),(11400, 14),(11528, 14),(11656, 14),(11784, 14),(11912, 14),(12040, 14),(12168, 14),(12296, 14),(12424, 14),(12552, 14),(12680, 14),(12808, 14),(12936, 14),(13064, 14),(13192, 14),(13320, 14),(13448, 14),(13576, 14),(13704, 14),(13832, 14),(13960, 14),(14088, 14),(14216, 14),(14344, 14),(14472, 14),(14600, 14),(14728, 14),(14856, 14),(14984, 14),(15112, 14),(15240, 14),(15368, 14),(15496, 14),(15624, 14),(15752, 14),(15880, 14),(16008, 14),(16136, 14),(16264, 14),(24, 15),];
///Table used to speed up the skipping of delta codes
pub const LEN: &[u8] = &[1, 4, 4, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, ];
